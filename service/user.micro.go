// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserLogin service

type UserLoginService interface {
	Login(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Responsel, error)
}

type userLoginService struct {
	c    client.Client
	name string
}

func NewUserLoginService(name string, c client.Client) UserLoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.user"
	}
	return &userLoginService{
		c:    c,
		name: name,
	}
}

func (c *userLoginService) Login(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Responsel, error) {
	req := c.c.NewRequest(c.name, "UserLogin.Login", in)
	out := new(Responsel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserLogin service

type UserLoginHandler interface {
	Login(context.Context, *RegReq, *Responsel) error
}

func RegisterUserLoginHandler(s server.Server, hdlr UserLoginHandler, opts ...server.HandlerOption) error {
	type userLogin interface {
		Login(ctx context.Context, in *RegReq, out *Responsel) error
	}
	type UserLogin struct {
		userLogin
	}
	h := &userLoginHandler{hdlr}
	return s.Handle(s.NewHandler(&UserLogin{h}, opts...))
}

type userLoginHandler struct {
	UserLoginHandler
}

func (h *userLoginHandler) Login(ctx context.Context, in *RegReq, out *Responsel) error {
	return h.UserLoginHandler.Login(ctx, in, out)
}

// Client API for UserRegister service

type UserRegisterService interface {
	Register(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Response, error)
}

type userRegisterService struct {
	c    client.Client
	name string
}

func NewUserRegisterService(name string, c client.Client) UserRegisterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.user"
	}
	return &userRegisterService{
		c:    c,
		name: name,
	}
}

func (c *userRegisterService) Register(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserRegister.Register", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRegister service

type UserRegisterHandler interface {
	Register(context.Context, *RegReq, *Response) error
}

func RegisterUserRegisterHandler(s server.Server, hdlr UserRegisterHandler, opts ...server.HandlerOption) error {
	type userRegister interface {
		Register(ctx context.Context, in *RegReq, out *Response) error
	}
	type UserRegister struct {
		userRegister
	}
	h := &userRegisterHandler{hdlr}
	return s.Handle(s.NewHandler(&UserRegister{h}, opts...))
}

type userRegisterHandler struct {
	UserRegisterHandler
}

func (h *userRegisterHandler) Register(ctx context.Context, in *RegReq, out *Response) error {
	return h.UserRegisterHandler.Register(ctx, in, out)
}
